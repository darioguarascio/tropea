# node:    9010
# apache2: 9003
# kibana:  9002
# pgadmin: 9001
# varnish: 9000

version: "3.5"

# volumes:
#   postgresql-data:
#     driver: local
#   es-data:
#     driver: local

networks:
  tes:
    name: tes
    driver: bridge

  # vpn:
  #   name: vpn
  #   driver: bridge

services:

    ###
    # Expose webapp to the world, logs HTTP requests into kibana via varnishncsa 
    ###
    varnish:
      environment:
        ENV: ${ENV}
        VARNISH_BACKENDS: ${VARNISH_BACKENDS}
      container_name: ${COMPOSE_PROJECT_NAME:-tes}.varnish
      healthcheck:
        test: ["CMD", "sh", "-c", "test -e /proc/`cat /varnish.pid` || (kill -s 15 -1 && (sleep 10; kill -s 9 -1)) " ]
        interval: 5s
        timeout: 1s
        retries: 1
        start_period: 5s

      build:
        context: ./docker/varnish
        args:
          VARNISH_VERSION: 6.5.1-r0
      restart: always
      ports:
        - '80:80'
      networks:
        - tes
      depends_on:
        - web

    redis:
      container_name: ${COMPOSE_PROJECT_NAME:-tes}.redis
      networks:
        - tes
      restart: always
      image: redis:latest
      # expose:
      #   - "6379"
      ports:
        - "6379:6379"



    tailwindcss:
      container_name: ${COMPOSE_PROJECT_NAME:-tes}.tailwindcss
      build: ./docker/tailwindcss
      restart: unless-stopped
      ports:
        - '9010:9000'
      volumes:
        - './src/tailwindcss:/var/www'
      working_dir: /var/www
      command: bash -c "npm install && npm run dev"
      networks:
        - tes


    web:
      build:
        context: ./docker/web/
        # args:
        #   ENV: ${ENV}
      container_name: ${COMPOSE_PROJECT_NAME:-tes}.web
      networks:
        - tes
      restart: always
      ports:
        - "9003:80"
      volumes:
        - ./VERSION:/VERSION
        - ./src/phalcon/public:/var/www/html
        - ./src/phalcon/:/app
        - ./src/jscss/build/css:/var/www/html/css
        - ./src/jscss/build/js:/var/www/html/js
      depends_on:
        - redis
      environment:
        ENV: ${ENV}
        TRACKER_REDIS_ADDRESS: ${COMPOSE_PROJECT_NAME:-tes}.redis:6379
        TRACKER_REDIS_DB: 0
        TRACKER_REDIS_QNAME: tracker


    # elasticsearch:
    #   container_name: ${COMPOSE_PROJECT_NAME:-tes}.elasticsearch
    #   build:
    #     context: docker/elasticsearch
    #     args:
    #       ELK_VERSION: $ELK_VERSION
    #   volumes:
    #     - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    #     - es-data:/usr/share/elasticsearch/data:rw
    #   ports:
    #     - "9200:9200"
    #     - "9300:9300"
    #   networks:
    #     - elk

    # logstash:
    #   container_name: ${COMPOSE_PROJECT_NAME:-tes}.logstash
    #   build:
    #     context: docker/logstash
    #     args:
    #       ELK_VERSION: $ELK_VERSION
    #   volumes:
    #     - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    #     - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
    #   ports:
    #     - "5445:5445/udp"
    #   networks:
    #     - app
    #     - elk
    #   depends_on:
    #     - elasticsearch

    # kibana:
    #   container_name: ${COMPOSE_PROJECT_NAME:-tes}.kibana
    #   build:
    #     context: docker/kibana/
    #     args:
    #       ELK_VERSION: $ELK_VERSION
    #   volumes:
    #     - ./docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    #   ports:
    #     - "9002:5601"
    #   networks:
    #     - elk
    #   depends_on:
    #     - elasticsearch
